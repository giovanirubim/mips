import * as AtomicComponent from '/js/atomic-components.js';
import { Circuit } from '/js/circuit.js';
import { ComposedComponent } from '/js/component.js';
export class BitAdder extends ComposedComponent {
	constructor() {
		super();
		const circuit = new Circuit();
		const inputLayer = [];
		const nonInput = [];
		this.circuit = circuit;
		this.inputLayer = inputLayer;
		this.nonInput = nonInput;
		const _1 = circuit.createIOPoint('input', 200, 0);
		const _2 = circuit.createIOPoint('input', -100, -120);
		const _3 = circuit.createIOPoint('input', 100, -120);
		const _4 = circuit.createIOPoint('output', -220, 0);
		const _5 = circuit.createIOPoint('output', 0, 160);
		const _6 = circuit.createPoint(120, 40);
		const _7 = circuit.createPoint(140, 20);
		const _8 = circuit.createPoint(140, 0);
		const _9 = circuit.createPoint(120, -20);
		const _a = circuit.createPoint(-100, -100);
		const _b = circuit.createPoint(-80, -80);
		const _c = circuit.createPoint(-40, -80);
		const _d = circuit.createPoint(-20, -60);
		const _e = circuit.createPoint(-60, -20);
		const _f = circuit.createPoint(-40, -40);
		const _10 = circuit.createPoint(-20, 0);
		const _11 = circuit.createPoint(20, 40);
		const _12 = circuit.createPoint(100, -60);
		const _13 = circuit.createPoint(100, 0);
		const _14 = new OrGate();
		circuit.add(_14);
		_14.transform.set(-1, 0, 0, -1, -140, 0);
		nonInput.push(_14);
		const _15 = new AndGate();
		circuit.add(_15);
		_15.transform.set(-1, 0, 0, -1, -60, 20);
		inputLayer.push(_15);
		const _16 = new XorGate();
		circuit.add(_16);
		_16.transform.set(0, 1, -1, 0, 0, 80);
		inputLayer.push(_16);
		const _17 = new AndGate();
		circuit.add(_17);
		_17.transform.set(-1, 0, 0, -1, 60, -40);
		inputLayer.push(_17);
		const _18 = new XorGate();
		circuit.add(_18);
		_18.transform.set(-1, 0, 0, -1, 60, 20);
		inputLayer.push(_18);
		circuit.createWire(_18.outerPoints[0], _6);
		circuit.createWire(_7, _6);
		circuit.createWire(_8, _7);
		circuit.createWire(_8, _1);
		circuit.createWire(_9, _8);
		circuit.createWire(_9, _17.outerPoints[0]);
		circuit.createWire(_a, _2);
		circuit.createWire(_b, _a);
		circuit.createWire(_c, _b);
		circuit.createWire(_d, _c);
		circuit.createWire(_10, _d);
		circuit.createWire(_e, _14.outerPoints[1]);
		circuit.createWire(_f, _e);
		circuit.createWire(_17.outerPoints[2], _f);
		circuit.createWire(_3, _12);
		circuit.createWire(_10, _15.outerPoints[1]);
		circuit.createWire(_10, _16.outerPoints[1]);
		circuit.createWire(_4, _14.outerPoints[2]);
		circuit.createWire(_14.outerPoints[0], _15.outerPoints[2]);
		circuit.createWire(_11, _15.outerPoints[0]);
		circuit.createWire(_5, _16.outerPoints[2]);
		circuit.createWire(_11, _16.outerPoints[0]);
		circuit.createWire(_18.outerPoints[2], _11);
		circuit.createWire(_12, _17.outerPoints[1]);
		circuit.createWire(_13, _12);
		circuit.createWire(_18.outerPoints[1], _13);
		const _19 = this.addIO(-20, -20, 'input');
		circuit.createHiddenWire(_19, _3)
		const _1a = this.addIO(0, -20, 'input');
		circuit.createHiddenWire(_1a, _2)
		const _1b = this.addIO(40, 0, 'input');
		circuit.createHiddenWire(_1b, _1)
		const _1c = this.addIO(0, 20, 'output');
		circuit.createHiddenWire(_1c, _5)
		const _1d = this.addIO(-40, 0, 'output');
		circuit.createHiddenWire(_1d, _4)
		this.hitbox = [-34, -14, 34, 14];
	}
}
export class FlipFlop extends ComposedComponent {
	constructor() {
		super();
		const circuit = new Circuit();
		const inputLayer = [];
		const nonInput = [];
		this.circuit = circuit;
		this.inputLayer = inputLayer;
		this.nonInput = nonInput;
		const _1 = circuit.createIOPoint('output', 320, 60);
		const _2 = circuit.createIOPoint('input', -280, -20);
		const _3 = circuit.createIOPoint('input', -280, -100);
		const _4 = circuit.createPoint(40, 120);
		const _5 = circuit.createPoint(-260, 120);
		const _6 = circuit.createPoint(20, -100);
		const _7 = circuit.createPoint(80, -60);
		const _8 = circuit.createPoint(80, 60);
		const _9 = circuit.createPoint(40, -20);
		const _a = circuit.createPoint(80, -20);
		const _b = circuit.createPoint(60, -100);
		const _c = circuit.createPoint(60, 100);
		const _d = circuit.createPoint(160, 40);
		const _e = circuit.createPoint(160, 20);
		const _f = circuit.createPoint(280, -20);
		const _10 = circuit.createPoint(280, -60);
		const _11 = circuit.createPoint(160, -40);
		const _12 = circuit.createPoint(160, -20);
		const _13 = circuit.createPoint(280, 20);
		const _14 = circuit.createPoint(280, 60);
		const _15 = circuit.createPoint(20, 60);
		const _16 = circuit.createPoint(-220, -60);
		const _17 = circuit.createPoint(-220, 60);
		const _18 = circuit.createPoint(-260, -20);
		const _19 = circuit.createPoint(-220, -20);
		const _1a = circuit.createPoint(-240, -100);
		const _1b = circuit.createPoint(-240, 100);
		const _1c = circuit.createPoint(-140, 40);
		const _1d = circuit.createPoint(-140, 20);
		const _1e = circuit.createPoint(-20, -20);
		const _1f = circuit.createPoint(-20, -60);
		const _20 = circuit.createPoint(-140, -40);
		const _21 = circuit.createPoint(-140, -20);
		const _22 = circuit.createPoint(-20, 20);
		const _23 = circuit.createPoint(-20, 60);
		const _24 = new NotGate();
		circuit.add(_24);
		_24.transform.set(0, -1, 1, 0, 40, 40);
		inputLayer.push(_24);
		const _25 = new NotGate();
		circuit.add(_25);
		_25.transform.set(0, 1, -1, 0, 60, 40);
		nonInput.push(_25);
		const _26 = new AndGate();
		circuit.add(_26);
		_26.transform.set(1, 0, 0, 1, 120, 80);
		nonInput.push(_26);
		const _27 = new AndGate();
		circuit.add(_27);
		_27.transform.set(1, 0, 0, 1, 120, -80);
		nonInput.push(_27);
		const _28 = new NorGate();
		circuit.add(_28);
		_28.transform.set(1, 0, 0, 1, 200, -60);
		nonInput.push(_28);
		const _29 = new NorGate();
		circuit.add(_29);
		_29.transform.set(1, 0, 0, 1, 200, 60);
		nonInput.push(_29);
		const _2a = new NotGate();
		circuit.add(_2a);
		_2a.transform.set(0, 1, -1, 0, -240, 40);
		inputLayer.push(_2a);
		const _2b = new AndGate();
		circuit.add(_2b);
		_2b.transform.set(1, 0, 0, 1, -180, 80);
		inputLayer.push(_2b);
		const _2c = new AndGate();
		circuit.add(_2c);
		_2c.transform.set(1, 0, 0, 1, -180, -80);
		inputLayer.push(_2c);
		const _2d = new NorGate();
		circuit.add(_2d);
		_2d.transform.set(1, 0, 0, 1, -100, -60);
		nonInput.push(_2d);
		const _2e = new NorGate();
		circuit.add(_2e);
		_2e.transform.set(1, 0, 0, 1, -100, 60);
		nonInput.push(_2e);
		circuit.createWire(_14, _1);
		circuit.createWire(_18, _2);
		circuit.createWire(_1a, _3);
		circuit.createWire(_b, _6);
		circuit.createWire(_15, _6);
		circuit.createWire(_24.outerPoints[1], _9);
		circuit.createWire(_24.outerPoints[0], _4);
		circuit.createWire(_5, _4);
		circuit.createWire(_18, _5);
		circuit.createWire(_13, _12);
		circuit.createWire(_f, _e);
		circuit.createWire(_21, _22);
		circuit.createWire(_27.outerPoints[2], _28.outerPoints[0]);
		circuit.createWire(_26.outerPoints[2], _29.outerPoints[1]);
		circuit.createWire(_29.outerPoints[2], _14);
		circuit.createWire(_14, _13);
		circuit.createWire(_12, _11);
		circuit.createWire(_11, _28.outerPoints[1]);
		circuit.createWire(_28.outerPoints[2], _10);
		circuit.createWire(_10, _f);
		circuit.createWire(_e, _d);
		circuit.createWire(_d, _29.outerPoints[0]);
		circuit.createWire(_25.outerPoints[1], _c);
		circuit.createWire(_c, _26.outerPoints[1]);
		circuit.createWire(_27.outerPoints[0], _b);
		circuit.createWire(_25.outerPoints[0], _b);
		circuit.createWire(_a, _9);
		circuit.createWire(_a, _8);
		circuit.createWire(_8, _26.outerPoints[0]);
		circuit.createWire(_a, _7);
		circuit.createWire(_7, _27.outerPoints[1]);
		circuit.createWire(_1e, _1d);
		circuit.createWire(_23, _15);
		circuit.createWire(_16, _2c.outerPoints[1]);
		circuit.createWire(_19, _16);
		circuit.createWire(_17, _2b.outerPoints[0]);
		circuit.createWire(_19, _17);
		circuit.createWire(_19, _18);
		circuit.createWire(_2a.outerPoints[0], _1a);
		circuit.createWire(_2c.outerPoints[0], _1a);
		circuit.createWire(_1b, _2b.outerPoints[1]);
		circuit.createWire(_2a.outerPoints[1], _1b);
		circuit.createWire(_2b.outerPoints[2], _2e.outerPoints[1]);
		circuit.createWire(_2c.outerPoints[2], _2d.outerPoints[0]);
		circuit.createWire(_1c, _2e.outerPoints[0]);
		circuit.createWire(_1d, _1c);
		circuit.createWire(_1f, _1e);
		circuit.createWire(_2d.outerPoints[2], _1f);
		circuit.createWire(_20, _2d.outerPoints[1]);
		circuit.createWire(_21, _20);
		circuit.createWire(_23, _22);
		circuit.createWire(_2e.outerPoints[2], _23);
		const _2f = this.addIO(20, 0, 'output');
		circuit.createHiddenWire(_2f, _1)
		const _30 = this.addIO(-20, -20, 'input');
		circuit.createHiddenWire(_30, _3)
		const _31 = this.addIO(-20, 0, 'input');
		circuit.createHiddenWire(_31, _2)
		this.hitbox = [-14, -34, 14, 34];
	}
}